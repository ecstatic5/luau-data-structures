{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Homepage","text":"<p>I welcome you to <code>roblox-data-structures</code>. The best ModuleScript for data structures</p>"},{"location":"#whats-this","title":"What's this?","text":"<p><code>roblox-data-structures</code> (RDS) is a <code>ModuleScript</code> made for and by the community, this module focuses on introducing new data structures to LUAU (e.g. Set, Array, Dict and others), along with powerful methods for each of these (inspired by other programming languages).</p>"},{"location":"#why-should-i-use-rds","title":"Why should I use RDS?","text":"<p>The real question is: When should I use it and when should I not?</p>"},{"location":"#when-you-should","title":"When you should","text":"<p>You should use it when you need to manipulate data in data structures easily and quickly without having to write the necessary methods to do what you need to do.</p> <p>You can also use it if you don't like to work with normal tables or metatables and you want to make your work easier.</p> <p>If you work with large amounts of data, this may not be the best option.</p>"},{"location":"#when-you-should-not","title":"When you should not","text":"<p>You should not use it if you manipulate a very large amount of data, as the methods may not be efficient for the task you are doing.</p>"},{"location":"#code-examples","title":"Code examples","text":"<p>Filter only even numbers <pre><code>local Array = require(\"&lt;module-location&gt;\")\nlocal numbers = Array.new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nlocal evenNumbers = numbers:filter(function(el)\n    return el % 2 == 0\nend)\n\nprint(evenNumbers) -- [2, 4, 6, 8, 10]\n</code></pre></p> <p>Obtain the square of all numbers <pre><code>local Array = require(\"&lt;module-location&gt;\")\nlocal numbers = Array.new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nlocal squareNumbers = numbers:map(function(el)\n    return el ^ 2\nend)\n\nprint(squareNumbers) -- [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</code></pre></p> <p>Filling an array with many positions with the same element <pre><code>local Array = require(\"&lt;module-location&gt;\")\nlocal zeros = Array.new():fill(0, 1000)\n\nprint(zeros) -- [0, 0, 0, 0, 0, 0, ..., 0]\n</code></pre></p> <p>Check if all the elements of an array meet a condition <pre><code>local Array = require(\"&lt;module-location&gt;\")\nlocal numbers = Array.new(1, 2, 4, 5, 6, 2, 8, 4, 3, 2)\n\nprint(numbers:every(function(el)\n    return el &gt; 3\nend)) -- false (not all elements are greater than 3)\n</code></pre></p>"},{"location":"#rds-api","title":"RDS API","text":"<p>You can visit the full RDS API clicking here. The API contains ALL the methods of ALL the data structures that RDS has.</p>"},{"location":"#all-rds-data-structures","title":"All RDS Data Structures","text":"<ul> <li>Array<ul> <li>Static Methods<ul> <li><code>.new&lt;T&gt;(...: T): Array</code></li> <li><code>.from&lt;T&gt;(iterable: { T }): Array</code></li> <li><code>.isArray(array: Array): boolean</code></li> <li><code>.isEmpty(array: Array): boolean</code></li> </ul> </li> <li>Instance Methods<ul> <li><code>:config(configuration: Types.ArrayConfig)</code></li> <li><code>:join(separator: string): string</code></li> <li><code>:includes(value: any): boolean</code></li> <li><code>:map&lt;T&gt;(fn: (el: T, index: number) -&gt; T)</code></li> <li><code>:every&lt;T&gt;(fn: (el: T) -&gt; boolean): boolean</code></li> <li><code>:some&lt;T&gt;(fn: (el: T) -&gt; boolean): boolean</code></li> <li><code>:fill&lt;T&gt;(amount: number, value: T)</code></li> <li><code>:merge&lt;T&gt;(array: Array)</code></li> <li><code>:filter&lt;T&gt;(fn: (value: T) -&gt; boolean): Array</code></li> <li><code>:slice(start: number, _end: number): Array</code></li> <li><code>:length(): number</code></li> <li><code>:entries(): Array</code></li> <li><code>:at(pos: number): any</code></li> <li><code>:forEach&lt;T&gt;(fn: (el: T, index: number?, array: Array?) -&gt; ())</code></li> <li><code>:push(element): number</code></li> <li><code>:count(value: any): number</code></li> <li><code>:choice(): any</code></li> <li><code>:copy(): Array</code></li> <li><code>:sort(): Array</code></li> <li><code>:first(): any</code></li> <li><code>:last(): any</code></li> <li><code>:remove(toRemove: number | string): any</code></li> <li><code>:pop(): number</code></li> <li><code>:shift(): any</code></li> <li><code>unshift&lt;T&gt;(...: T): number</code></li> <li><code>:reverse()</code></li> <li><code>:clean()</code></li> <li><code>:flat(depth: number): Array</code></li> <li><code>:append&lt;T&gt;(...: T): number</code></li> <li><code>:indexOf&lt;T&gt;(el: T): number</code></li> </ul> </li> </ul> </li> <li>Set<ul> <li><code>coming soon</code></li> </ul> </li> <li>Dict<ul> <li><code>coming soon</code></li> </ul> </li> <li>Map<ul> <li><code>coming soon</code></li> </ul> </li> </ul>"},{"location":"about/","title":"What is the project's objective?","text":"<p>Our goal is to serve the community and help them streamline their work by manipulating data within data structures.</p> <p>Because LUAU has only <code>tables</code> as data structure, it is very inflexible and has no useful methods for large projects. Because of this we have decided to create new data structures for LUAU.</p>"},{"location":"about/#how-does-rds-actually-work","title":"How does RDS actually work?","text":"<p>Due to LUAU's limitations with tables, the data structures provided by RDS are really tables on the back end, but they are tables with special methods and functionalities for your game.</p> <p>This can be discovered by executing the following code in your data structure <pre><code>local Array = require(\"&lt;module-location&gt;\")\nlocal numbers = Array.new(1, 2, 3, 4)\n\nprint(numbers.current) -- {1, 2, 3, 4}\nprint(typeof(numbers.current)) -- table\n</code></pre></p> <p>[\u2757] Each data structure contains a property called \"<code>current</code>\" which is a table containing all the elements of your array.</p> <ul> <li>If you want to know more about this, visit the API</li> </ul> <p>Each time you call the .new() method of the Array class, a new instance of this class is created, with which using the notation \":\" you can access its methods</p> script.lua<pre><code>local Array = require(\"&lt;module-location&gt;\")\nlocal numbers = Array.new(1, 2, 3, 4)\n\nnumbers:forEach(function(el) \n    print(el)\nend)\n</code></pre> Array.lua<pre><code>function Array.new&lt;T&gt;(...: T)\n    local self = setmetatable({ current = { ... } }, Array)\n    return self\nend\n\nfunction Array:forEach&lt;T&gt;(fn: (el: T, index: number?, array: { T }?) -&gt; ())\n    for i, v in self.current do\n        if fn(v, i, self) == true then\n            break\n        end\n    end\nend\n</code></pre>"},{"location":"about/#note-by-the-creators","title":"Note by the creators","text":"<p>It is important for you to know that we are not professionals in the LUAU world, we are just some young guys who want to help the community by contributing something that can be valuable and useful. We hope you can use this ModuleScript with a reason :D</p> <p>\ud83c\udf1f If you want to support us you can give us star in the github repository \ud83c\udf1f</p>"},{"location":"changelog/","title":"RDS Changelog","text":"<p>In this section you will find the changes made to the ModuleScript and the documentation</p>"},{"location":"changelog/#versions-table","title":"Versions table","text":"<ul> <li>v1.6.4-rc.4 <code>latest</code></li> <li>v1.5.4-rc.3</li> <li>v1.4.3-rc.2</li> <li>v1.3.3-rc.1</li> <li>v1.2.2-alpha</li> <li>v1.1.1-alpha</li> <li>v1.0.0-alpha <code>oldest</code></li> </ul>"},{"location":"changelog/#2023-v","title":"??/??/2023: v?.?.?","text":"<ul> <li>coming soon \ud83d\udd25</li> </ul>"},{"location":"changelog/#25102023-v164-rc4","title":"25/10/2023: v1.6.4-rc.4","text":"<ul> <li>1 new method added to the Arrays (<code>:indexOf()</code>)</li> </ul>"},{"location":"changelog/#24102023-v154-rc3","title":"24/10/2023: v1.5.4-rc.3","text":"<ul> <li><code>:choice()</code> can now return more than one element if desired</li> <li><code>:flat()</code> can now flat arrays</li> <li>More tests added to the Arrays (yes, more, i hate this)</li> <li>Refactored code</li> </ul>"},{"location":"changelog/#23102023-v143-rc2","title":"23/10/2023: v1.4.3-rc.2","text":"<ul> <li>2 new methods added to the Arrays (<code>:flat()</code>, <code>:append()</code>)</li> <li><code>:filter()</code> Now throws an error if the parameter 'fn' is not passed</li> <li>More tests added to the Arrays</li> <li>The version table is now sorted from newest to oldest</li> </ul>"},{"location":"changelog/#22102023-v133-rc1","title":"22/10/2023: v1.3.3-rc.1","text":"<ul> <li>Dynamic require has been added</li> <li>The <code>source code</code> for each data structure has been <code>split into separate files for each method</code></li> <li>Refactored code</li> <li>Better typechecking</li> <li>News section added to documentation</li> <li>New types added</li> <li>Tests added for each Array method</li> </ul>"},{"location":"changelog/#22102023-v122-beta","title":"22/10/2023: v1.2.2-beta","text":"<ul> <li>7 new methods added to the Arrays (<code>:count()</code>, <code>:choice()</code>, <code>:copy()</code>, <code>:sort()</code>,<code>:first()</code>, <code>:last()</code>, <code>:remove()</code>)</li> <li>More tests added to the Arrays</li> <li>API section added to the documentation</li> <li>Installation section added to the documentation</li> </ul>"},{"location":"changelog/#21102023-v111-alpha","title":"21/10/2023: v1.1.1-alpha","text":"<ul> <li>3 new methods added to the Arrays (<code>:at()</code>, <code>:entries()</code>, <code>:length()</code>)</li> <li>More tests added to the Arrays</li> <li>Improved TypeChecking in Arrays</li> <li>Useless code removed</li> <li>Array's code refactored</li> </ul>"},{"location":"changelog/#21102023-v100-alpha","title":"21/10/2023: v1.0.0-alpha","text":"<ul> <li>ModuleScript published</li> <li>21 new methods added to the Arrays</li> <li>Arrays created</li> </ul>"},{"location":"api/arrays/","title":"Array","text":""},{"location":"api/arrays/#array","title":"Array","text":"<p>It is a data structure which receives an indefinite amount of any type of value.</p> <p>Creates a new instance of the Array class</p>"},{"location":"api/arrays/#newt-t-array-static-constructor","title":".new&lt;T&gt;(...: T): Array <code>static (.)</code> <code>constructor</code>","text":""},{"location":"api/arrays/#parameters","title":"Parameters","text":"<ul> <li><code>...: T</code>: Elements of any data type or type T to be added to the array</li> </ul>"},{"location":"api/arrays/#code-example","title":"Code example","text":"<pre><code>local Array = require(\"&lt;module-location&gt;\")\nlocal numbers = Array.new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n</code></pre> <p>Creates a new instance of Array with the elements of the iterable</p>"},{"location":"api/arrays/#fromtiterable-t-array-static-constructor","title":".from&lt;T&gt;(iterable: { T }): Array <code>static (.)</code> <code>constructor</code>","text":""},{"location":"api/arrays/#parameters_1","title":"Parameters","text":"<ul> <li><code>iterable: { T }</code>: The table with the elements to be converted to Array</li> </ul>"},{"location":"api/arrays/#code-example_1","title":"Code example","text":"<pre><code>local Array = require(\"&lt;module-location&gt;\")\n\nlocal letters = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}\nlocal lettersArray = Array.from(letters)\nprint(lettersArray.current) -- {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}\n\n-- Now you can use the array methods with these elements :)\n</code></pre> <p>Checks if the argument passed to it is an instance of Array</p> <p>This method checks if the argument contains a property called \"current\", so if you pass a table like <code>{current=\"hi\"}</code> it will return true.</p>"},{"location":"api/arrays/#isarrayarray-array-boolean-static","title":".isArray(array: Array): boolean <code>static (.)</code>","text":""},{"location":"api/arrays/#parameters_2","title":"Parameters","text":"<ul> <li><code>array: Array</code>: The object to be checked if it is an instance of Array</li> </ul>"},{"location":"api/arrays/#code-example_2","title":"Code example","text":"<pre><code>local Array = require(\"&lt;module-location&gt;\")\n\nlocal validArray = Array.new(1, 2, 3, 4)\nlocal invalidArray = {1, 2, 3, 4}\n\nprint(Array.isArray(validArray)) -- true\nprint(Array.isArray(invalidArray)) -- false\nprint(Array.isArray({current = \"DON'T DO THIS\"})) -- true\nprint(Array.isArray(4)) -- false (Return false if it is a data type other than a table or array)\n</code></pre> <p>Checks whether the array (or any other data structure) is empty or not</p>"},{"location":"api/arrays/#isemptyarray-array-boolean-static-constructor","title":".isEmpty(array: Array): boolean <code>static (.)</code> <code>constructor</code>","text":""},{"location":"api/arrays/#parameters_3","title":"Parameters","text":"<ul> <li><code>array: Array</code>: The object to be checked if it is empty</li> </ul>"},{"location":"api/arrays/#code-example_3","title":"Code example","text":"<pre><code>local Array = require(\"&lt;module-location&gt;\")\n\nlocal numbers = Array.new() -- empty array\nlocal letters = Array.new(\"a\", \"b\", \"c\", \"d\", \"e\")\n\nprint(Array.isEmpty(numbers)) -- true\nprint(Array.isEmpty(letters)) -- false\nprint(Array.isEmpty({1, 2})) -- false\nprint(Array.isEmpty(4)) -- ERROR: 'array' must be an Array\n</code></pre>"},{"location":"api/arrays/#more-coming-soon","title":"MORE COMING SOON \ud83e\udd95","text":""},{"location":"api/data-structures/","title":"RDS API","text":"<p>All functions of all RDS data structures are documented here.</p> <p>Some methods will come with the following tags:</p> <ul> <li><code>static (.)</code>: Means that the current method does not need an instance and can be used only by using the class.</li> <li><code>instance (:)</code>: Means that you need to instantiate the class to be able to use it.</li> <li><code>constructor</code>: Means that the method is a class constructor or returns a new data structure.</li> </ul>"},{"location":"api/data-structures/#all-the-rds-api","title":"All the RDS API","text":""},{"location":"api/data-structures/#array","title":"Array","text":"<ul> <li>"},{"location":"api/data-structures/#newt-t-array-static-constructor","title":".new&lt;T&gt;(...: T): Array - <code>static (.)</code> <code>constructor</code>","text":""},{"location":"api/data-structures/#fromtiterable-t-array-static-constructor","title":".from&lt;T&gt;(iterable: { T }): Array - <code>static (.)</code> <code>constructor</code>","text":""},{"location":"api/data-structures/#isarrayarray-array-boolean-static","title":".isArray(array: Array): boolean - <code>static (.)</code>","text":""},{"location":"api/data-structures/#isemptyarray-array-boolean-static","title":".isEmpty(array: Array): boolean - <code>static (.)</code>","text":""},{"location":"api/data-structures/#configconfiguration-typesarrayconfig-instance","title":":config(configuration: Types.ArrayConfig) - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#joinseparator-string-string-instance","title":":join(separator: string): string - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#includesvalue-any-boolean-instance","title":":includes(value: any): boolean - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#mapfn-el-t-index-number-t-instance-constructor","title":":map(fn: (el: T, index: number) -&gt; T) - <code>instance (:)</code> <code>constructor</code>  <li>","text":""},{"location":"api/data-structures/#everyfn-el-t-boolean-boolean-instance","title":":every(fn: (el: T) -&gt; boolean): boolean - <code>instance (:)</code>  <li>","text":""},{"location":"api/data-structures/#somefn-el-t-boolean-boolean-instance","title":":some(fn: (el: T) -&gt; boolean): boolean - <code>instance (:)</code>  <li>","text":""},{"location":"api/data-structures/#fillamount-number-value-t-instance","title":":fill(amount: number, value: T) - <code>instance (:)</code>  <li>","text":""},{"location":"api/data-structures/#mergearray-array-instance","title":":merge(array: Array) - <code>instance (:)</code>  <li>","text":""},{"location":"api/data-structures/#filterfn-value-t-boolean-array-instance-constructor","title":":filter(fn: (value: T) -&gt; boolean): Array - <code>instance (:)</code> <code>constructor</code>      <li>","text":""},{"location":"api/data-structures/#slicestart-number-_end-number-array-instance-constructor","title":":slice(start: number, _end: number): Array - <code>instance (:)</code> <code>constructor</code>","text":""},{"location":"api/data-structures/#length-number-instance","title":":length(): number - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#entries-array-instance-constructor","title":":entries(): Array - <code>instance (:)</code> <code>constructor</code>","text":""},{"location":"api/data-structures/#atpos-number-any-instance","title":":at(pos: number): any - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#foreachfn-el-t-index-number-array-array-instance","title":":forEach(fn: (el: T, index: number?, array: Array?) -&gt; ()) - <code>instance (:)</code>            <li>","text":""},{"location":"api/data-structures/#pushelement-number-instance","title":":push(element): number - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#countvalue-any-number-instance","title":":count(value: any): number - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#choice-any-instance","title":":choice(): any - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#copy-array-instance-constructor","title":":copy(): Array - <code>instance (:)</code> <code>constructor</code>","text":""},{"location":"api/data-structures/#sort-array-instance-constructor","title":":sort(): Array - <code>instance (:)</code> <code>constructor</code>","text":""},{"location":"api/data-structures/#first-any-instance","title":":first(): any - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#last-any-instance","title":":last(): any - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#removetoremove-number-string-any-instance","title":":remove(toRemove: number | string): any - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#pop-number-instance","title":":pop(): number - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#shift-any-instance","title":":shift(): any - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#unshift-t-number-instance","title":"unshift(...: T): number - <code>instance (:)</code>     <li>","text":""},{"location":"api/data-structures/#reverse-instance","title":":reverse() - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#clean-instance","title":":clean() - <code>instance (:)</code>","text":""},{"location":"api/data-structures/#flatdepth-number-array-instance-constructor","title":":flat(depth: number): Array - <code>instance (:)</code> <code>constructor</code>","text":""},{"location":"api/data-structures/#append-t-number-instance","title":":append(...: T): number <code>instance (:)</code>  <li>","text":""},{"location":"api/data-structures/#indexofel-t-number-instance","title":":indexOf(el: T): number <code>instance (:)</code>","text":""},{"location":"api/data-structures/#types","title":"Types","text":""},{"location":"api/data-structures/#arraytypesarrayconfig","title":"Array.Types.ArrayConfig","text":""},{"location":"api/data-structures/#arraytypesarray","title":"Array.Types.Array","text":""},{"location":"api/data-structures/#arraytypes_self","title":"Array.Types._self","text":""},{"location":"api/types/","title":"Types","text":"<p>Represents the configuration of an Array.</p> <p>It is requested in the following methods</p> <ul> <li>:config() - <code>instance (:)</code> <code>Array</code></li> </ul> <pre><code>{\n    maxFillMethodAmount: number?,\n}\n</code></pre>"},{"location":"api/types/#arraytypesarrayconfig-table","title":"Array.Types.ArrayConfig - <code>table</code>","text":""},{"location":"api/types/#properties","title":"Properties","text":"<ul> <li><code>maxFillMethodAmount: number?</code>: The maximum number of elements that can be generated by the :fill() method of the Array class.</li> </ul> <p>Represents an Array.</p> <p>It is requested in the following methods</p> <ul> <li>None</li> </ul> <pre><code>export type Array&lt;T&gt; = {\n    --[[\n        - Array.properties: Properties of the array\n        - Array.static: Static methods of the Array class\n        - Array.instance: Instance methods of the Array class\n        - @returns Array&lt;T&gt;: Methods that returns Arrays\n    ]]\n\n    --[[ Array.properties ]]\n    current: { T },\n\n    --[[ Array.static ]]\n    from: (iterable: { T }) -&gt; Array&lt;T&gt;,\n    isArray: (array: Array&lt;T&gt;) -&gt; boolean,\n    new: (...T) -&gt; Array&lt;T&gt;,\n    isEmpty: (array: Array&lt;T&gt;) -&gt; boolean,\n\n    --[[ Array.instance ]]\n    config: (self: _self, configuration: ArrayConfig) -&gt; (),\n    join: (self: _self, separator: string) -&gt; string,\n    includes: (self: _self, value: T) -&gt; boolean,\n    every: (self: _self, fn: (el: T) -&gt; boolean) -&gt; boolean,\n    some: (self: _self, fn: (el: T) -&gt; boolean) -&gt; boolean,\n    merge: (self: _self, array: { T }) -&gt; (),\n    forEach: (self: _self, fn: (el: T, index: number?, array: { T }?) -&gt; ()) -&gt; (),\n    length: (self: _self) -&gt; number,\n    at: (self: _self, pos: number) -&gt; T,\n    push: (self: _self, element: T) -&gt; number,\n    count: (self: _self, value: T) -&gt; number,\n    first: (self: _self) -&gt; T,\n    last: (self: _self) -&gt; T,\n    pop: (self: _self) -&gt; number,\n    shift: (self: _self) -&gt; number,\n    unshift: (self: _self, ...T) -&gt; number,\n    toString: (self: _self) -&gt; string,\n    append: (self: _self, ...T) -&gt; number,\n    indexOf: (self: _self, el: T) -&gt; number,\n\n    --[[ @returns Array&lt;T&gt; Array.instance ]]\n    choice: (self: _self, amount: number?) -&gt; T | Array&lt;T&gt;,\n    map: (self: _self, fn: (el: T, index: number) -&gt; T) -&gt; Array&lt;T&gt;,\n    fill: (self: _self, amount: number, value: T) -&gt; Array&lt;T&gt;,\n    filter: (self: _self, fn: (value: T) -&gt; boolean) -&gt; Array&lt;T&gt;,\n    slice: (self: _self, start: number, _end: number?) -&gt; Array&lt;T&gt;,\n    entries: (self: _self) -&gt; Array&lt;T&gt;,\n    copy: (self: _self) -&gt; Array&lt;T&gt;,\n    sort: (self: _self, fn: (a: T, b: T) -&gt; ()) -&gt; Array&lt;T&gt;,\n    remove: (self: _self, toRemove: number | string) -&gt; Array&lt;T&gt;,\n    reverse: (self: _self) -&gt; Array&lt;T&gt;,\n    clean: (self: _self) -&gt; Array&lt;T&gt;,\n    flat: (self: _self, depth: number) -&gt; Array&lt;T&gt;,\n}\n</code></pre>"},{"location":"api/types/#arraytypesarray-table","title":"Array.Types.Array - <code>table</code>","text":""},{"location":"api/types/#properties_1","title":"Properties","text":"<ul> <li>None</li> </ul> <p>Represents the actual Array.</p> <p>It is requested in the following methods</p> <ul> <li>None</li> </ul> <pre><code>export type _self = {}\n</code></pre>"},{"location":"api/types/#arraytypes_self-table","title":"Array.Types._self - <code>table</code>","text":""},{"location":"api/types/#properties_2","title":"Properties","text":"<ul> <li>None</li> </ul>"},{"location":"news/v1.3.3-rc-1/","title":"News","text":"<p>RDS has improved its code!</p>"},{"location":"news/v1.3.3-rc-1/#current-news","title":"Current news","text":"<p>The <code>RDS source code</code> has been enhanced with dynamic require, each of the functions of the <code>RDS data structures</code> have been split into separate files.</p>"},{"location":"news/v1.3.3-rc-1/#how-was-this-achieved","title":"How was this achieved?","text":"<p>This has been achieved thanks to the following logic</p> <pre><code>for _, method in methods:GetChildren() do\n    &lt;data-structure&gt;[method.Name] = require(method)\nend\n</code></pre> <p>The new file structure of each of the data structures is as follows</p> <pre><code>- Array\n    - init.lua\n    - methods\n        - all Array methods\n    - private\n        - Types.lua\n    - .spec\n        - spec files...\n</code></pre>"},{"location":"news/v1.3.3-rc-1/#how-does-it-work","title":"How does it work?","text":"<p>The code shown above, goes through the folder called \"methods\", inside that folder there are <code>.lua</code> files (ModuleScripts), each of these files returns an anonymous function whose reference is stored in the Array table with the name of the file as index.</p> init.lua<pre><code>for _, method in methods:GetChildren() do\n    Array[method.Name] = require(method)\nend\n</code></pre> join.lua<pre><code>return function(self, separator: string)\n    assert(type(separator) == \"string\", \"'separator' must be a string\")\n    assert(self:length() &gt; 0, \"It's not possible to join empty arrays\")\n\n    return table.concat(self.current, separator or \"\")\nend\n</code></pre>"},{"location":"news/v1.3.3-rc-1/#doing-this-would-be-the-same-as-doing-the-following","title":"Doing this would be the same as doing the following","text":"<pre><code>local Array = {\n    ...\n    join = function(self, separator: string)\n        assert(type(separator) == \"string\", \"'separator' must be a string\")\n        assert(self:length() &gt; 0, \"It's not possible to join empty arrays\")\n\n        return table.concat(self.current, separator or \"\")\n    end\n}\n</code></pre> <p>Thanks to this we can do the following</p> <pre><code>local Array = require(\"&lt;module-location&gt;\")\n\nlocal numbers = Array.new(1, 2, 3, 4, 5, 6)\nprint(numbers:join(\"\")) -- \"123456\"\n</code></pre>"},{"location":"news/v1.3.3-rc-1/#the-problem","title":"The problem","text":"<p>Doing the <code>require</code> dynamically, will remove the autocomplete from the Roblox editor and VSCode.</p> <p>And we have fixed this problem by creating a type called \"Array\" in <code>Array/private/Types.lua</code> which represents an instance of Array with all its methods and properties</p> Types.lua<pre><code>export type Array&lt;T&gt; = {\n    --[[\n        - Array.properties: Properties of the array\n        - Array.static: Static methods of the Array class\n        - Array.instance: Instance methods of the Array class\n        - @returns Array&lt;T&gt;: Methods that returns Arrays\n    ]]\n\n    --[[ Array.properties ]]\n    current: { T },\n\n    --[[ Array.static ]]\n    from: (iterable: { T }) -&gt; Array&lt;T&gt;,\n    isArray: (array: Array&lt;T&gt;) -&gt; boolean,\n    new: (...T) -&gt; Array&lt;T&gt;,\n    isEmpty: (array: Array&lt;T&gt;) -&gt; boolean,\n\n    --[[ Array.instance ]]\n    config: (self: _self, configuration: ArrayConfig) -&gt; (),\n    join: (self: _self, separator: string) -&gt; string,\n    includes: (self: _self, value: T) -&gt; boolean,\n    every: (self: _self, fn: (el: T) -&gt; boolean) -&gt; boolean,\n    some: (self: _self, fn: (el: T) -&gt; boolean) -&gt; boolean,\n    merge: (self: _self, array: { T }) -&gt; (),\n    forEach: (self: _self, fn: (el: T, index: number?, array: { T }?) -&gt; ()) -&gt; (),\n    length: (self: _self) -&gt; number,\n    at: (self: _self, pos: number) -&gt; T,\n    push: (self: _self, element: T) -&gt; number,\n    count: (self: _self, value: T) -&gt; number,\n    choice: (self: _self) -&gt; T,\n    first: (self: _self) -&gt; T,\n    last: (self: _self) -&gt; T,\n    pop: (self: _self) -&gt; number,\n    shift: (self: _self) -&gt; number,\n    unshift: (self: _self, ...T) -&gt; number,\n    toString: (self: _self) -&gt; (),\n\n    --[[ @returns Array&lt;T&gt; Array.instance ]]\n    map: (self: _self, fn: (el: T, index: number) -&gt; T) -&gt; Array&lt;T&gt;,\n    fill: (self: _self, amount: number, value: T) -&gt; Array&lt;T&gt;,\n    filter: (self: _self, fn: (value: T) -&gt; boolean) -&gt; Array&lt;T&gt;,\n    slice: (self: _self, start: number, _end: number?) -&gt; Array&lt;T&gt;,\n    entries: (self: _self) -&gt; Array&lt;T&gt;,\n    copy: (self: _self) -&gt; Array&lt;T&gt;,\n    sort: (self: _self, fn: (a: T, b: T) -&gt; ()) -&gt; Array&lt;T&gt;,\n    remove: (self: _self, toRemove: number | string) -&gt; Array&lt;T&gt;,\n    reverse: (self: _self) -&gt; Array&lt;T&gt;,\n    clean: (self: _self) -&gt; Array&lt;T&gt;,\n}\n\nexport type _self = {}\n</code></pre> <p>Thanks to this, the typechecking of the Array class is completely improved and we activate the autocomplete</p>"},{"location":"news/v1.3.3-rc-1/#benefits-of-doing-this","title":"Benefits of doing this","text":"<ul> <li>We can hide properties or methods from autocompletion</li> <li>We can know what is the type of data we are storing in the array</li> <li>The user does not have to know what this data type does in order to use the data structure.</li> </ul>"},{"location":"news/v1.3.3-rc-1/#disadvantages-of-doing-this","title":"Disadvantages of doing this","text":"<ul> <li>It is too tedious to have to add a new type in order to activate its autocompletion.</li> <li>May be too long and unreadable</li> <li>May not be the best idea</li> </ul>"},{"location":"tutorial/creating-data-structure/","title":"Creating data structures","text":"<p>First of all, a data structure (in RDS) is a way to store several data in the same place and to manipulate them with special methods and functionalities.</p> <p>If you want to know more about the existing methods in RDS, check the API</p>"},{"location":"tutorial/creating-data-structure/#first-steps","title":"First steps","text":""},{"location":"tutorial/creating-data-structure/#arrays","title":"Arrays","text":""},{"location":"tutorial/installation/","title":"Installation","text":""},{"location":"tutorial/installation/#rojo-vscode","title":"ROJO (VSCode)","text":"<ol> <li>Go to the releases section in GitHub</li> <li>Click on the file named <code>Source code (zip)</code> or <code>Source code (tar.gz)</code></li> <li>Unzip the compressed file</li> <li>Copy the folder named <code>src</code> and paste it into your ROJO project.</li> <li>Rename the <code>src</code> folder to: <code>DataStructures</code>.</li> </ol> <p>And that's it, start using RDS :)</p>"},{"location":"tutorial/installation/#roblox-studio","title":"Roblox Studio","text":"<ol> <li>Go to the releases section in GitHub</li> <li>Click on the file named <code>DataStructures.rbxm</code></li> <li>Open your Roblox Studio</li> <li>Right click on <code>ReplicatedStorage</code> and click \"Insert from file\" and select the .rbxm file that you downloaded</li> </ol> <p>And that's it, start using RDS :)</p>"},{"location":"tutorial/key-concepts/","title":"Key concepts","text":""},{"location":"tutorial/understanding-rds-api/","title":"Understanding the RDS API","text":""}]}